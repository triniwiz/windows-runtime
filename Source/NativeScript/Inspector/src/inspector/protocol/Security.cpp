// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/inspector/protocol/Security.h"

#include "src/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol\crdtp/cbor.h"
#include "third_party/inspector_protocol\crdtp/find_by_first.h"
#include "third_party/inspector_protocol\crdtp/span.h"

namespace v8_inspector {
namespace protocol {
namespace Security {

using v8_crdtp::DeserializerState;
using v8_crdtp::ProtocolTypeTraits;

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Security";
const char Metainfo::commandPrefix[] = "Security.";
const char Metainfo::version[] = "1.3";


namespace MixedContentTypeEnum {
const char Blockable[] = "blockable";
const char OptionallyBlockable[] = "optionally-blockable";
const char None[] = "none";
} // namespace MixedContentTypeEnum


namespace SecurityStateEnum {
const char Unknown[] = "unknown";
const char Neutral[] = "neutral";
const char Insecure[] = "insecure";
const char Secure[] = "secure";
const char Info[] = "info";
const char InsecureBroken[] = "insecure-broken";
} // namespace SecurityStateEnum


V8_CRDTP_BEGIN_DESERIALIZER(CertificateSecurityState)
    V8_CRDTP_DESERIALIZE_FIELD("certificate", m_certificate),
    V8_CRDTP_DESERIALIZE_FIELD("certificateHasSha1Signature", m_certificateHasSha1Signature),
    V8_CRDTP_DESERIALIZE_FIELD("certificateHasWeakSignature", m_certificateHasWeakSignature),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("certificateNetworkError", m_certificateNetworkError),
    V8_CRDTP_DESERIALIZE_FIELD("cipher", m_cipher),
    V8_CRDTP_DESERIALIZE_FIELD("issuer", m_issuer),
    V8_CRDTP_DESERIALIZE_FIELD("keyExchange", m_keyExchange),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("keyExchangeGroup", m_keyExchangeGroup),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("mac", m_mac),
    V8_CRDTP_DESERIALIZE_FIELD("modernSSL", m_modernSSL),
    V8_CRDTP_DESERIALIZE_FIELD("obsoleteSslCipher", m_obsoleteSslCipher),
    V8_CRDTP_DESERIALIZE_FIELD("obsoleteSslKeyExchange", m_obsoleteSslKeyExchange),
    V8_CRDTP_DESERIALIZE_FIELD("obsoleteSslProtocol", m_obsoleteSslProtocol),
    V8_CRDTP_DESERIALIZE_FIELD("obsoleteSslSignature", m_obsoleteSslSignature),
    V8_CRDTP_DESERIALIZE_FIELD("protocol", m_protocol),
    V8_CRDTP_DESERIALIZE_FIELD("subjectName", m_subjectName),
    V8_CRDTP_DESERIALIZE_FIELD("validFrom", m_validFrom),
    V8_CRDTP_DESERIALIZE_FIELD("validTo", m_validTo),
V8_CRDTP_END_DESERIALIZER()

V8_CRDTP_BEGIN_SERIALIZER(CertificateSecurityState)
    V8_CRDTP_SERIALIZE_FIELD("protocol", m_protocol);
    V8_CRDTP_SERIALIZE_FIELD("keyExchange", m_keyExchange);
    V8_CRDTP_SERIALIZE_FIELD("keyExchangeGroup", m_keyExchangeGroup);
    V8_CRDTP_SERIALIZE_FIELD("cipher", m_cipher);
    V8_CRDTP_SERIALIZE_FIELD("mac", m_mac);
    V8_CRDTP_SERIALIZE_FIELD("certificate", m_certificate);
    V8_CRDTP_SERIALIZE_FIELD("subjectName", m_subjectName);
    V8_CRDTP_SERIALIZE_FIELD("issuer", m_issuer);
    V8_CRDTP_SERIALIZE_FIELD("validFrom", m_validFrom);
    V8_CRDTP_SERIALIZE_FIELD("validTo", m_validTo);
    V8_CRDTP_SERIALIZE_FIELD("certificateNetworkError", m_certificateNetworkError);
    V8_CRDTP_SERIALIZE_FIELD("certificateHasWeakSignature", m_certificateHasWeakSignature);
    V8_CRDTP_SERIALIZE_FIELD("certificateHasSha1Signature", m_certificateHasSha1Signature);
    V8_CRDTP_SERIALIZE_FIELD("modernSSL", m_modernSSL);
    V8_CRDTP_SERIALIZE_FIELD("obsoleteSslProtocol", m_obsoleteSslProtocol);
    V8_CRDTP_SERIALIZE_FIELD("obsoleteSslKeyExchange", m_obsoleteSslKeyExchange);
    V8_CRDTP_SERIALIZE_FIELD("obsoleteSslCipher", m_obsoleteSslCipher);
    V8_CRDTP_SERIALIZE_FIELD("obsoleteSslSignature", m_obsoleteSslSignature);
V8_CRDTP_END_SERIALIZER();


namespace SafetyTipStatusEnum {
const char BadReputation[] = "badReputation";
const char Lookalike[] = "lookalike";
} // namespace SafetyTipStatusEnum


V8_CRDTP_BEGIN_DESERIALIZER(SafetyTipInfo)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("safeUrl", m_safeUrl),
    V8_CRDTP_DESERIALIZE_FIELD("safetyTipStatus", m_safetyTipStatus),
V8_CRDTP_END_DESERIALIZER()

V8_CRDTP_BEGIN_SERIALIZER(SafetyTipInfo)
    V8_CRDTP_SERIALIZE_FIELD("safetyTipStatus", m_safetyTipStatus);
    V8_CRDTP_SERIALIZE_FIELD("safeUrl", m_safeUrl);
V8_CRDTP_END_SERIALIZER();


V8_CRDTP_BEGIN_DESERIALIZER(VisibleSecurityState)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("certificateSecurityState", m_certificateSecurityState),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("safetyTipInfo", m_safetyTipInfo),
    V8_CRDTP_DESERIALIZE_FIELD("securityState", m_securityState),
    V8_CRDTP_DESERIALIZE_FIELD("securityStateIssueIds", m_securityStateIssueIds),
V8_CRDTP_END_DESERIALIZER()

V8_CRDTP_BEGIN_SERIALIZER(VisibleSecurityState)
    V8_CRDTP_SERIALIZE_FIELD("securityState", m_securityState);
    V8_CRDTP_SERIALIZE_FIELD("certificateSecurityState", m_certificateSecurityState);
    V8_CRDTP_SERIALIZE_FIELD("safetyTipInfo", m_safetyTipInfo);
    V8_CRDTP_SERIALIZE_FIELD("securityStateIssueIds", m_securityStateIssueIds);
V8_CRDTP_END_SERIALIZER();


V8_CRDTP_BEGIN_DESERIALIZER(SecurityStateExplanation)
    V8_CRDTP_DESERIALIZE_FIELD("certificate", m_certificate),
    V8_CRDTP_DESERIALIZE_FIELD("description", m_description),
    V8_CRDTP_DESERIALIZE_FIELD("mixedContentType", m_mixedContentType),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("recommendations", m_recommendations),
    V8_CRDTP_DESERIALIZE_FIELD("securityState", m_securityState),
    V8_CRDTP_DESERIALIZE_FIELD("summary", m_summary),
    V8_CRDTP_DESERIALIZE_FIELD("title", m_title),
V8_CRDTP_END_DESERIALIZER()

V8_CRDTP_BEGIN_SERIALIZER(SecurityStateExplanation)
    V8_CRDTP_SERIALIZE_FIELD("securityState", m_securityState);
    V8_CRDTP_SERIALIZE_FIELD("title", m_title);
    V8_CRDTP_SERIALIZE_FIELD("summary", m_summary);
    V8_CRDTP_SERIALIZE_FIELD("description", m_description);
    V8_CRDTP_SERIALIZE_FIELD("mixedContentType", m_mixedContentType);
    V8_CRDTP_SERIALIZE_FIELD("certificate", m_certificate);
    V8_CRDTP_SERIALIZE_FIELD("recommendations", m_recommendations);
V8_CRDTP_END_SERIALIZER();


V8_CRDTP_BEGIN_DESERIALIZER(InsecureContentStatus)
    V8_CRDTP_DESERIALIZE_FIELD("containedMixedForm", m_containedMixedForm),
    V8_CRDTP_DESERIALIZE_FIELD("displayedContentWithCertErrors", m_displayedContentWithCertErrors),
    V8_CRDTP_DESERIALIZE_FIELD("displayedInsecureContentStyle", m_displayedInsecureContentStyle),
    V8_CRDTP_DESERIALIZE_FIELD("displayedMixedContent", m_displayedMixedContent),
    V8_CRDTP_DESERIALIZE_FIELD("ranContentWithCertErrors", m_ranContentWithCertErrors),
    V8_CRDTP_DESERIALIZE_FIELD("ranInsecureContentStyle", m_ranInsecureContentStyle),
    V8_CRDTP_DESERIALIZE_FIELD("ranMixedContent", m_ranMixedContent),
V8_CRDTP_END_DESERIALIZER()

V8_CRDTP_BEGIN_SERIALIZER(InsecureContentStatus)
    V8_CRDTP_SERIALIZE_FIELD("ranMixedContent", m_ranMixedContent);
    V8_CRDTP_SERIALIZE_FIELD("displayedMixedContent", m_displayedMixedContent);
    V8_CRDTP_SERIALIZE_FIELD("containedMixedForm", m_containedMixedForm);
    V8_CRDTP_SERIALIZE_FIELD("ranContentWithCertErrors", m_ranContentWithCertErrors);
    V8_CRDTP_SERIALIZE_FIELD("displayedContentWithCertErrors", m_displayedContentWithCertErrors);
    V8_CRDTP_SERIALIZE_FIELD("ranInsecureContentStyle", m_ranInsecureContentStyle);
    V8_CRDTP_SERIALIZE_FIELD("displayedInsecureContentStyle", m_displayedInsecureContentStyle);
V8_CRDTP_END_SERIALIZER();


// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::certificateError(int eventId, const String& errorType, const String& requestURL)
{
    if (!frontend_channel_)
        return;
    v8_crdtp::ObjectSerializer serializer;
    serializer.AddField(v8_crdtp::MakeSpan("eventId"), eventId);
    serializer.AddField(v8_crdtp::MakeSpan("errorType"), errorType);
    serializer.AddField(v8_crdtp::MakeSpan("requestURL"), requestURL);
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Security.certificateError", serializer.Finish()));
}

void Frontend::visibleSecurityStateChanged(std::unique_ptr<protocol::Security::VisibleSecurityState> visibleSecurityState)
{
    if (!frontend_channel_)
        return;
    v8_crdtp::ObjectSerializer serializer;
    serializer.AddField(v8_crdtp::MakeSpan("visibleSecurityState"), visibleSecurityState);
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Security.visibleSecurityStateChanged", serializer.Finish()));
}

void Frontend::securityStateChanged(const String& securityState, bool schemeIsCryptographic, std::unique_ptr<protocol::Array<protocol::Security::SecurityStateExplanation>> explanations, std::unique_ptr<protocol::Security::InsecureContentStatus> insecureContentStatus, Maybe<String> summary)
{
    if (!frontend_channel_)
        return;
    v8_crdtp::ObjectSerializer serializer;
    serializer.AddField(v8_crdtp::MakeSpan("securityState"), securityState);
    serializer.AddField(v8_crdtp::MakeSpan("schemeIsCryptographic"), schemeIsCryptographic);
    serializer.AddField(v8_crdtp::MakeSpan("explanations"), explanations);
    serializer.AddField(v8_crdtp::MakeSpan("insecureContentStatus"), insecureContentStatus);
    serializer.AddField(v8_crdtp::MakeSpan("summary"), summary);
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Security.securityStateChanged", serializer.Finish()));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const v8_crdtp::Dispatchable& dispatchable);

    std::function<void(const v8_crdtp::Dispatchable&)> Dispatch(v8_crdtp::span<uint8_t> command_name) override;

 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(v8_crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<v8_crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    };
    return commands;
  }();
  return v8_crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const v8_crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(v8_crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;

  return [this, handler](const v8_crdtp::Dispatchable& dispatchable) {
    (this->*handler)(dispatchable);
  };
}


namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<v8_crdtp::span<uint8_t>, v8_crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<v8_crdtp::span<uint8_t>, v8_crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(v8_crdtp::SpanFrom("Security"), SortedRedirects(), std::move(dispatcher));
}

} // Security
} // namespace v8_inspector
} // namespace protocol
