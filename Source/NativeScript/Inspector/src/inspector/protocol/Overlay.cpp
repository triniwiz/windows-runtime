// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/inspector/protocol/Overlay.h"

#include "src/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol\crdtp/cbor.h"
#include "third_party/inspector_protocol\crdtp/find_by_first.h"
#include "third_party/inspector_protocol\crdtp/span.h"

namespace v8_inspector {
namespace protocol {
namespace Overlay {

using v8_crdtp::DeserializerState;
using v8_crdtp::ProtocolTypeTraits;

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Overlay";
const char Metainfo::commandPrefix[] = "Overlay.";
const char Metainfo::version[] = "1.3";

V8_CRDTP_BEGIN_DESERIALIZER(HighlightConfig)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("borderColor", m_borderColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("contentColor", m_contentColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("cssGridColor", m_cssGridColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("eventTargetColor", m_eventTargetColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("marginColor", m_marginColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("paddingColor", m_paddingColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("shapeColor", m_shapeColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("shapeMarginColor", m_shapeMarginColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("showExtensionLines", m_showExtensionLines),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("showInfo", m_showInfo),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("showRulers", m_showRulers),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("showStyles", m_showStyles),
V8_CRDTP_END_DESERIALIZER()

V8_CRDTP_BEGIN_SERIALIZER(HighlightConfig)
    V8_CRDTP_SERIALIZE_FIELD("showInfo", m_showInfo);
    V8_CRDTP_SERIALIZE_FIELD("showStyles", m_showStyles);
    V8_CRDTP_SERIALIZE_FIELD("showRulers", m_showRulers);
    V8_CRDTP_SERIALIZE_FIELD("showExtensionLines", m_showExtensionLines);
    V8_CRDTP_SERIALIZE_FIELD("contentColor", m_contentColor);
    V8_CRDTP_SERIALIZE_FIELD("paddingColor", m_paddingColor);
    V8_CRDTP_SERIALIZE_FIELD("borderColor", m_borderColor);
    V8_CRDTP_SERIALIZE_FIELD("marginColor", m_marginColor);
    V8_CRDTP_SERIALIZE_FIELD("eventTargetColor", m_eventTargetColor);
    V8_CRDTP_SERIALIZE_FIELD("shapeColor", m_shapeColor);
    V8_CRDTP_SERIALIZE_FIELD("shapeMarginColor", m_shapeMarginColor);
    V8_CRDTP_SERIALIZE_FIELD("cssGridColor", m_cssGridColor);
V8_CRDTP_END_SERIALIZER();


namespace InspectModeEnum {
const char SearchForNode[] = "searchForNode";
const char SearchForUAShadowDOM[] = "searchForUAShadowDOM";
const char CaptureAreaScreenshot[] = "captureAreaScreenshot";
const char ShowDistances[] = "showDistances";
const char None[] = "none";
} // namespace InspectModeEnum


// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::inspectNodeRequested(int backendNodeId)
{
    if (!frontend_channel_)
        return;
    v8_crdtp::ObjectSerializer serializer;
    serializer.AddField(v8_crdtp::MakeSpan("backendNodeId"), backendNodeId);
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Overlay.inspectNodeRequested", serializer.Finish()));
}

void Frontend::nodeHighlightRequested(int nodeId)
{
    if (!frontend_channel_)
        return;
    v8_crdtp::ObjectSerializer serializer;
    serializer.AddField(v8_crdtp::MakeSpan("nodeId"), nodeId);
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Overlay.nodeHighlightRequested", serializer.Finish()));
}

void Frontend::screenshotRequested(std::unique_ptr<protocol::Page::Viewport> viewport)
{
    if (!frontend_channel_)
        return;
    v8_crdtp::ObjectSerializer serializer;
    serializer.AddField(v8_crdtp::MakeSpan("viewport"), viewport);
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Overlay.screenshotRequested", serializer.Finish()));
}

void Frontend::inspectModeCanceled()
{
    if (!frontend_channel_)
        return;
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("Overlay.inspectModeCanceled"));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const v8_crdtp::Dispatchable& dispatchable);

    std::function<void(const v8_crdtp::Dispatchable&)> Dispatch(v8_crdtp::span<uint8_t> command_name) override;

    void disable(const v8_crdtp::Dispatchable& dispatchable);
    void enable(const v8_crdtp::Dispatchable& dispatchable);
    void getHighlightObjectForTest(const v8_crdtp::Dispatchable& dispatchable);
    void hideHighlight(const v8_crdtp::Dispatchable& dispatchable);
    void highlightFrame(const v8_crdtp::Dispatchable& dispatchable);
    void highlightNode(const v8_crdtp::Dispatchable& dispatchable);
    void highlightQuad(const v8_crdtp::Dispatchable& dispatchable);
    void highlightRect(const v8_crdtp::Dispatchable& dispatchable);
    void setInspectMode(const v8_crdtp::Dispatchable& dispatchable);
    void setShowAdHighlights(const v8_crdtp::Dispatchable& dispatchable);
    void setPausedInDebuggerMessage(const v8_crdtp::Dispatchable& dispatchable);
    void setShowDebugBorders(const v8_crdtp::Dispatchable& dispatchable);
    void setShowFPSCounter(const v8_crdtp::Dispatchable& dispatchable);
    void setShowPaintRects(const v8_crdtp::Dispatchable& dispatchable);
    void setShowLayoutShiftRegions(const v8_crdtp::Dispatchable& dispatchable);
    void setShowScrollBottleneckRects(const v8_crdtp::Dispatchable& dispatchable);
    void setShowHitTestBorders(const v8_crdtp::Dispatchable& dispatchable);
    void setShowViewportSizeOnResize(const v8_crdtp::Dispatchable& dispatchable);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(v8_crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<v8_crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          v8_crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          v8_crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          v8_crdtp::SpanFrom("getHighlightObjectForTest"),
          &DomainDispatcherImpl::getHighlightObjectForTest
    },
    {
          v8_crdtp::SpanFrom("hideHighlight"),
          &DomainDispatcherImpl::hideHighlight
    },
    {
          v8_crdtp::SpanFrom("highlightFrame"),
          &DomainDispatcherImpl::highlightFrame
    },
    {
          v8_crdtp::SpanFrom("highlightNode"),
          &DomainDispatcherImpl::highlightNode
    },
    {
          v8_crdtp::SpanFrom("highlightQuad"),
          &DomainDispatcherImpl::highlightQuad
    },
    {
          v8_crdtp::SpanFrom("highlightRect"),
          &DomainDispatcherImpl::highlightRect
    },
    {
          v8_crdtp::SpanFrom("setInspectMode"),
          &DomainDispatcherImpl::setInspectMode
    },
    {
          v8_crdtp::SpanFrom("setPausedInDebuggerMessage"),
          &DomainDispatcherImpl::setPausedInDebuggerMessage
    },
    {
          v8_crdtp::SpanFrom("setShowAdHighlights"),
          &DomainDispatcherImpl::setShowAdHighlights
    },
    {
          v8_crdtp::SpanFrom("setShowDebugBorders"),
          &DomainDispatcherImpl::setShowDebugBorders
    },
    {
          v8_crdtp::SpanFrom("setShowFPSCounter"),
          &DomainDispatcherImpl::setShowFPSCounter
    },
    {
          v8_crdtp::SpanFrom("setShowHitTestBorders"),
          &DomainDispatcherImpl::setShowHitTestBorders
    },
    {
          v8_crdtp::SpanFrom("setShowLayoutShiftRegions"),
          &DomainDispatcherImpl::setShowLayoutShiftRegions
    },
    {
          v8_crdtp::SpanFrom("setShowPaintRects"),
          &DomainDispatcherImpl::setShowPaintRects
    },
    {
          v8_crdtp::SpanFrom("setShowScrollBottleneckRects"),
          &DomainDispatcherImpl::setShowScrollBottleneckRects
    },
    {
          v8_crdtp::SpanFrom("setShowViewportSizeOnResize"),
          &DomainDispatcherImpl::setShowViewportSizeOnResize
    },
    };
    return commands;
  }();
  return v8_crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const v8_crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(v8_crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;

  return [this, handler](const v8_crdtp::Dispatchable& dispatchable) {
    (this->*handler)(dispatchable);
  };
}


namespace {


}  // namespace

void DomainDispatcherImpl::disable(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {


}  // namespace

void DomainDispatcherImpl::enable(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct getHighlightObjectForTestParams : public v8_crdtp::DeserializableProtocolObject<getHighlightObjectForTestParams> {
    int nodeId;
    Maybe<bool> includeDistance;
    Maybe<bool> includeStyle;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(getHighlightObjectForTestParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("includeDistance", includeDistance),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("includeStyle", includeStyle),
    V8_CRDTP_DESERIALIZE_FIELD("nodeId", nodeId),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::getHighlightObjectForTest(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    getHighlightObjectForTestParams params;
    getHighlightObjectForTestParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;

    // Declare output parameters.
    std::unique_ptr<protocol::DictionaryValue> out_highlight;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getHighlightObjectForTest(params.nodeId, std::move(params.includeDistance), std::move(params.includeStyle), &out_highlight);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.getHighlightObjectForTest"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::unique_ptr<v8_crdtp::Serializable> result;
        if (response.IsSuccess()) {
          v8_crdtp::ObjectSerializer serializer;
          serializer.AddField(v8_crdtp::MakeSpan("highlight"), out_highlight);
          result = serializer.Finish();
        } else {
          result = Serializable::From({});
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, std::move(result));
      }
    return;
}

namespace {


}  // namespace

void DomainDispatcherImpl::hideHighlight(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->hideHighlight();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.hideHighlight"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct highlightFrameParams : public v8_crdtp::DeserializableProtocolObject<highlightFrameParams> {
    String frameId;
    Maybe<protocol::DOM::RGBA> contentColor;
    Maybe<protocol::DOM::RGBA> contentOutlineColor;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(highlightFrameParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("contentColor", contentColor),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("contentOutlineColor", contentOutlineColor),
    V8_CRDTP_DESERIALIZE_FIELD("frameId", frameId),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::highlightFrame(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    highlightFrameParams params;
    highlightFrameParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightFrame(params.frameId, std::move(params.contentColor), std::move(params.contentOutlineColor));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.highlightFrame"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct highlightNodeParams : public v8_crdtp::DeserializableProtocolObject<highlightNodeParams> {
    std::unique_ptr<protocol::Overlay::HighlightConfig> highlightConfig;
    Maybe<int> nodeId;
    Maybe<int> backendNodeId;
    Maybe<String> objectId;
    Maybe<String> selector;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(highlightNodeParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("backendNodeId", backendNodeId),
    V8_CRDTP_DESERIALIZE_FIELD("highlightConfig", highlightConfig),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("nodeId", nodeId),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("objectId", objectId),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("selector", selector),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::highlightNode(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    highlightNodeParams params;
    highlightNodeParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightNode(std::move(params.highlightConfig), std::move(params.nodeId), std::move(params.backendNodeId), std::move(params.objectId), std::move(params.selector));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.highlightNode"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct highlightQuadParams : public v8_crdtp::DeserializableProtocolObject<highlightQuadParams> {
    std::unique_ptr<protocol::Array<double>> quad;
    Maybe<protocol::DOM::RGBA> color;
    Maybe<protocol::DOM::RGBA> outlineColor;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(highlightQuadParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("color", color),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("outlineColor", outlineColor),
    V8_CRDTP_DESERIALIZE_FIELD("quad", quad),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::highlightQuad(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    highlightQuadParams params;
    highlightQuadParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightQuad(std::move(params.quad), std::move(params.color), std::move(params.outlineColor));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.highlightQuad"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct highlightRectParams : public v8_crdtp::DeserializableProtocolObject<highlightRectParams> {
    int x;
    int y;
    int width;
    int height;
    Maybe<protocol::DOM::RGBA> color;
    Maybe<protocol::DOM::RGBA> outlineColor;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(highlightRectParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("color", color),
    V8_CRDTP_DESERIALIZE_FIELD("height", height),
    V8_CRDTP_DESERIALIZE_FIELD_OPT("outlineColor", outlineColor),
    V8_CRDTP_DESERIALIZE_FIELD("width", width),
    V8_CRDTP_DESERIALIZE_FIELD("x", x),
    V8_CRDTP_DESERIALIZE_FIELD("y", y),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::highlightRect(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    highlightRectParams params;
    highlightRectParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightRect(params.x, params.y, params.width, params.height, std::move(params.color), std::move(params.outlineColor));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.highlightRect"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setInspectModeParams : public v8_crdtp::DeserializableProtocolObject<setInspectModeParams> {
    String mode;
    Maybe<protocol::Overlay::HighlightConfig> highlightConfig;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setInspectModeParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("highlightConfig", highlightConfig),
    V8_CRDTP_DESERIALIZE_FIELD("mode", mode),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setInspectMode(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setInspectModeParams params;
    setInspectModeParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setInspectMode(params.mode, std::move(params.highlightConfig));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setInspectMode"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowAdHighlightsParams : public v8_crdtp::DeserializableProtocolObject<setShowAdHighlightsParams> {
    bool show;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowAdHighlightsParams)
    V8_CRDTP_DESERIALIZE_FIELD("show", show),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowAdHighlights(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowAdHighlightsParams params;
    setShowAdHighlightsParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowAdHighlights(params.show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowAdHighlights"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setPausedInDebuggerMessageParams : public v8_crdtp::DeserializableProtocolObject<setPausedInDebuggerMessageParams> {
    Maybe<String> message;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setPausedInDebuggerMessageParams)
    V8_CRDTP_DESERIALIZE_FIELD_OPT("message", message),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setPausedInDebuggerMessage(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setPausedInDebuggerMessageParams params;
    setPausedInDebuggerMessageParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setPausedInDebuggerMessage(std::move(params.message));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setPausedInDebuggerMessage"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowDebugBordersParams : public v8_crdtp::DeserializableProtocolObject<setShowDebugBordersParams> {
    bool show;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowDebugBordersParams)
    V8_CRDTP_DESERIALIZE_FIELD("show", show),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowDebugBorders(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowDebugBordersParams params;
    setShowDebugBordersParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowDebugBorders(params.show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowDebugBorders"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowFPSCounterParams : public v8_crdtp::DeserializableProtocolObject<setShowFPSCounterParams> {
    bool show;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowFPSCounterParams)
    V8_CRDTP_DESERIALIZE_FIELD("show", show),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowFPSCounter(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowFPSCounterParams params;
    setShowFPSCounterParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowFPSCounter(params.show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowFPSCounter"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowPaintRectsParams : public v8_crdtp::DeserializableProtocolObject<setShowPaintRectsParams> {
    bool result;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowPaintRectsParams)
    V8_CRDTP_DESERIALIZE_FIELD("result", result),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowPaintRects(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowPaintRectsParams params;
    setShowPaintRectsParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowPaintRects(params.result);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowPaintRects"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowLayoutShiftRegionsParams : public v8_crdtp::DeserializableProtocolObject<setShowLayoutShiftRegionsParams> {
    bool result;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowLayoutShiftRegionsParams)
    V8_CRDTP_DESERIALIZE_FIELD("result", result),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowLayoutShiftRegions(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowLayoutShiftRegionsParams params;
    setShowLayoutShiftRegionsParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowLayoutShiftRegions(params.result);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowLayoutShiftRegions"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowScrollBottleneckRectsParams : public v8_crdtp::DeserializableProtocolObject<setShowScrollBottleneckRectsParams> {
    bool show;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowScrollBottleneckRectsParams)
    V8_CRDTP_DESERIALIZE_FIELD("show", show),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowScrollBottleneckRects(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowScrollBottleneckRectsParams params;
    setShowScrollBottleneckRectsParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowScrollBottleneckRects(params.show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowScrollBottleneckRects"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowHitTestBordersParams : public v8_crdtp::DeserializableProtocolObject<setShowHitTestBordersParams> {
    bool show;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowHitTestBordersParams)
    V8_CRDTP_DESERIALIZE_FIELD("show", show),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowHitTestBorders(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowHitTestBordersParams params;
    setShowHitTestBordersParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowHitTestBorders(params.show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowHitTestBorders"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {

struct setShowViewportSizeOnResizeParams : public v8_crdtp::DeserializableProtocolObject<setShowViewportSizeOnResizeParams> {
    bool show;
    DECLARE_DESERIALIZATION_SUPPORT();
};

V8_CRDTP_BEGIN_DESERIALIZER(setShowViewportSizeOnResizeParams)
    V8_CRDTP_DESERIALIZE_FIELD("show", show),
V8_CRDTP_END_DESERIALIZER()

}  // namespace

void DomainDispatcherImpl::setShowViewportSizeOnResize(const v8_crdtp::Dispatchable& dispatchable)
{
    // Prepare input parameters.
    auto deserializer = v8_crdtp::DeferredMessage::FromSpan(dispatchable.Params())->MakeDeserializer();
    setShowViewportSizeOnResizeParams params;
    setShowViewportSizeOnResizeParams::Deserialize(&deserializer, &params);
    if (MaybeReportInvalidParams(dispatchable, deserializer))
      return;


    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowViewportSizeOnResize(params.show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("Overlay.setShowViewportSizeOnResize"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<v8_crdtp::span<uint8_t>, v8_crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<v8_crdtp::span<uint8_t>, v8_crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(v8_crdtp::SpanFrom("Overlay"), SortedRedirects(), std::move(dispatcher));
}

} // Overlay
} // namespace v8_inspector
} // namespace protocol
